generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  CASH
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DeliveryStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Units {
  KG
  UNIT
  CAN
  BOX
  PIECE
}

model Customer {
  id        Int               @id @default(autoincrement())
  name      String
  phone     String            @unique
  email     String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  addresses CustomerAddress[]
  sessions  CustomerSession[]
  orders    Order[]
  reviews   Review[]
}

model CustomerAddress {
  id           Int      @id @default(autoincrement())
  customerId   Int
  street       String
  number       String
  colony       String
  between      String?
  city         String
  state        String
  zip_code     String
  country      String
  observations String?
  address_name String
  is_default   Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model CustomerSession {
  id                Int      @id @default(autoincrement())
  customerId        Int      @unique
  sessionId         String   @unique
  wamId             String   @unique
  lastAccess        DateTime
  lastMessage       String
  lastMessageDate   DateTime
  lastMessageType   String
  lastMessageStatus String
  previousState     String
  state             String
  deviceId          String
  expiresAt         DateTime
  createdAt         DateTime @default(now())
  ipAddress         String
  updatedAt         DateTime @updatedAt
  customer          Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  stock       Int
  description String?
  imageUrl    String?
  categoryId  Int?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category?   @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]
}

model Order {
  id                  Int         @id @default(autoincrement())
  customerId          Int
  statusId            Int
  totalPrice          Float
  notes               String?
  delivery_address    String
  order_delivery_date DateTime
  total_amount        Int
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  customer            Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  status              OrderStatus @relation(fields: [statusId], references: [id])
  orderItems          OrderItem[]
  payment             Payment?
  delivery            Delivery?
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  unit_price Float
  totalPrice Float
  unit       Units
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model OrderStatus {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  orders    Order[]
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int           @unique
  amount    Float
  method    PaymentMethod
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Delivery {
  id        Int            @id @default(autoincrement())
  orderId   Int            @unique
  address   String
  status    DeliveryStatus
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Review {
  id         Int      @id @default(autoincrement())
  productId  Int
  customerId Int
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompanyStablishment {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  phone     String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
