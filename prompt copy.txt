Para integrar ambos contextos y construir una referencia m√°s completa que se pueda utilizar f√°cilmente en otros casos, combinando las recomendaciones t√©cnicas y los detalles operativos del sistema multiempresa, te presento una versi√≥n consolidada que puedes usar para comprender y gestionar tu plataforma backend de chatbots.

üß† CONTEXTO GENERAL
Stack tecnol√≥gico:

Node.js + TypeScript + Express + Prisma

PostgreSQL

API oficial de WhatsApp Business

AWS (EC2, S3, RDS u otros seg√∫n necesidad)

Base de datos multiempresa (multi-tenant):

Cada nueva empresa contratante genera un conjunto de tablas base dedicadas a esa empresa. La base de datos de cada empresa est√° aislada y puede estar en un esquema distinto o en una base de datos separada, dependiendo de la estrategia de multitenancy seleccionada (por ejemplo, esquemas separados company_abc.Customers o prefijos abc_Customers).

Tablas principales por empresa:

Customers

Customer_Addresses

Products

Orders

Order_Status

Order_History

Customer_Sessions

Adem√°s de las tablas base, puedes tener tablas adicionales relacionadas con el negocio espec√≠fico de cada empresa.

Backend:

Desarrollado con Express (en TypeScript).

Orientado a servicios para chatbot integrado con WhatsApp Business API.

C√≥digo estructurado bajo buenas pr√°cticas:

Clean Architecture

Principios SOLID

Separaci√≥n por capas (Controllers, Services, Repositories)

Mensajes a los usuarios finales siempre en espa√±ol.

C√≥digo y documentaci√≥n interna en ingl√©s.

Validaciones en arranque del servidor:

Comprobaci√≥n de variables de entorno necesarias (cargadas desde un archivo .env).

Validaci√≥n de conexiones activas a:

Base de datos (PostgreSQL)

API de WhatsApp

Servicios de AWS (EC2, RDS, etc.)

Verificaci√≥n de rutas de webhook y configuraci√≥n de logs.

üéØ OBJETIVO FINAL
Desarrollar una plataforma backend multiempresa para la atenci√≥n automatizada por WhatsApp dirigida a:

Tiendas de abarrotes

Verduler√≠as

Empresas de agua a domicilio

Tintorer√≠as

Otros comercios locales

Modelos de suscripci√≥n:

B√°sico

Completo

Premium

Cada suscripci√≥n tiene restricciones, como el volumen de mensajes, la cantidad de productos activos y las funcionalidades habilitadas.

Webhook √∫nico y din√°mico:

Un √∫nico endpoint para manejar todos los webhooks de las empresas: /webhook.

Cada empresa se identifica por su phone_number_id (nunca por headers), que es extra√≠do del body del webhook para identificar al cliente.

üß© MODELO DE BASE DE DATOS
Tabla Central: Clients (base de datos de administraci√≥n)
Campo	Tipo	Descripci√≥n
id	UUID	ID √∫nico del cliente (empresa)
name	VARCHAR	Nombre de la empresa
phone_number_id	VARCHAR	ID de n√∫mero de WhatsApp de la empresa (Meta)
whatsapp_token	TEXT	Token de autenticaci√≥n de la WhatsApp Business API
db_connection_config	JSONB	Configuraci√≥n de acceso a la base de datos de la empresa (cadena de conexi√≥n o par√°metros)
plan_type	VARCHAR	Plan actual de la empresa (b√°sico, completo, premium)
created_at	TIMESTAMP	Fecha de registro de la empresa

Tablas por Empresa:
Las tablas de la empresa (como Customers, Orders, Products) se replican en cada base de datos o esquema seg√∫n la estrategia multitenancy.

Customers

Campo	Tipo	Descripci√≥n
id	UUID	ID √∫nico del cliente
wa_id	VARCHAR	ID de WhatsApp del cliente
name	VARCHAR	Nombre del cliente
phone_number	VARCHAR	N√∫mero de tel√©fono del cliente
first_contact_at	TIMESTAMP	Fecha de primer contacto
created_at	TIMESTAMP	Fecha de creaci√≥n

Customer_Addresses

Campo	Tipo	Descripci√≥n
id	UUID	ID √∫nico de la direcci√≥n
customer_id	UUID	Referencia al cliente
address	VARCHAR	Direcci√≥n del cliente
is_primary	BOOLEAN	Indica si es la direcci√≥n principal
created_at	TIMESTAMP	Fecha de creaci√≥n

Products

Campo	Tipo	Descripci√≥n
id	UUID	ID √∫nico del producto
name	VARCHAR	Nombre del producto
description	TEXT	Descripci√≥n del producto
price	DECIMAL	Precio del producto
is_active	BOOLEAN	Indica si el producto est√° activo
stock	INT	Cantidad disponible del producto
created_at	TIMESTAMP	Fecha de creaci√≥n

Orders

Campo	Tipo	Descripci√≥n
id	UUID	ID √∫nico del pedido
order_code	VARCHAR	C√≥digo √∫nico del pedido
customer_id	UUID	ID del cliente
address_id	UUID	ID de la direcci√≥n del pedido
total	DECIMAL	Total del pedido
status	VARCHAR	Estado del pedido (pendiente, en proceso, etc.)
created_at	TIMESTAMP	Fecha de creaci√≥n

Customer_Sessions

Campo	Tipo	Descripci√≥n
id	UUID	ID √∫nico de la sesi√≥n
customer_id	UUID	ID del cliente
last_step	TEXT	√öltimo paso del flujo conversacional
expires_at	TIMESTAMP	Fecha de expiraci√≥n de la sesi√≥n
is_active	BOOLEAN	Indica si la sesi√≥n est√° activa
created_at	TIMESTAMP	Fecha de creaci√≥n

ü§ñ FLUJO DE BOT AUTOM√ÅTICO
Escucha constante del webhook (POST /webhook):

Si el n√∫mero es nuevo, registrar cliente en la tabla Customers y almacenar datos.

Si el n√∫mero ya est√° registrado, pasar al men√∫ principal.

Men√∫ principal (en espa√±ol):

Opciones: Ver cat√°logo, Hacer un pedido, Estado de pedido, Hablar con un asesor.

Flujos de conversaci√≥n:

Cat√°logo: Mostrar productos activos.

Pedido: Recolectar producto, cantidad, direcci√≥n, confirmar y crear el pedido.

Estado de pedido: Buscar el √∫ltimo pedido y mostrar su estado.

Asesor: Derivar la conversaci√≥n a un humano.

Confirmaci√≥n de pedido:

Crear un nuevo pedido (Orders).

Enviar resumen de pedido y estado inicial.

Notificaci√≥n opcional al administrador del comercio.

Manejo de sesi√≥n:

Usar la tabla Customer_Sessions para guardar el √∫ltimo estado y permitir reanudar la conversaci√≥n si el cliente retoma despu√©s de un tiempo.

üõë RECOMENDACIONES ADICIONALES
Manejo de errores: En caso de entradas no v√°lidas o error, responder con un mensaje claro y opciones.

Logs y trazabilidad: Implementar un middleware para logging y trazabilidad de eventos.

Sistema de alertas: Configurar alertas para monitorear fallos en la API de WhatsApp o problemas con los pedidos.

Estructura de proyecto
mi-proyecto-chatbot/
‚îÇ
‚îú‚îÄ‚îÄ src/                    # C√≥digo fuente
‚îÇ   ‚îú‚îÄ‚îÄ controllers/         # L√≥gica de los endpoints
‚îÇ   ‚îú‚îÄ‚îÄ services/            # L√≥gica de negocio
‚îÇ   ‚îú‚îÄ‚îÄ repositories/        # Interacci√≥n con la base de datos
‚îÇ   ‚îú‚îÄ‚îÄ models/              # Modelos de datos (tipos de base de datos, entidades)
‚îÇ   ‚îú‚îÄ‚îÄ middlewares/         # Middleware (logging, validaciones, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ routes/              # Definici√≥n de rutas
‚îÇ   ‚îú‚îÄ‚îÄ utils/               # Utilidades auxiliares
‚îÇ   ‚îî‚îÄ‚îÄ app.ts               # Configuraci√≥n principal de Express
‚îÇ
‚îú‚îÄ‚îÄ .env                    # Variables de entorno
‚îú‚îÄ‚îÄ tsconfig.json            # Configuraci√≥n de TypeScript
‚îú‚îÄ‚îÄ package.json             # Configuraci√≥n de NPM
‚îî‚îÄ‚îÄ nodemon.json             # Configuraci√≥n de Nodemon


npx prisma generate --schema=prisma/tenant/schema.prisma
npx prisma generate --schema=prisma/central/schema.prisma